# Project Plan: Autonomous AI Headhunter Agent

## 1. Project Goal
To create a personal AI agent that emulates an "executive level headhunter." The agent will proactively identify strategic career opportunities, provide deep market and company intelligence, and equip the user with a competitive advantage for networking and interviewing. It operates on-demand, delivering a comprehensive briefing in a single run.

## 2. The "Headhunter" Workflow
The agent will be executed via `job_search_agent.py`.

1.  **Briefing**: The agent starts and prompts for the **target job title/role** and **location**.
2.  **Candidate Profile**: The agent parses `resume.pdf` using `PyMuPDF` and OpenAI to create a structured Candidate Profile.
3.  **Market Analysis**:
    *   The agent performs web searches to identify a **"Target Company List"** of strategically interesting companies (e.g., fastest-growing, best culture), regardless of current job openings.
4.  **Opportunity Sourcing**:
    *   The agent searches for fresh job postings (last 24 hours) that match the user's profile.
    *   It also scans the careers pages and recent news of the "Target Company List" for new openings or hiring signals (e.g., new funding).
5.  **Filtering & Memory**:
    *   It loads `seen_jobs.csv` and filters out any opportunities it has previously reported.
6.  **Strategic Analysis (Top 3 Opportunities)**: For the top 3 most promising opportunities, the agent compiles a "Deep Prep Dossier":
    *   **a. Company Intelligence**: Researches company culture, work-life balance, strategic goals, and recent news/trajectory (growth or risk signals).
    *   **b. Networking Intelligence**: Identifies key people at the company (hiring managers, department heads, potential peers).
    *   **c. Compensation Intelligence**: Performs web searches to establish a "Compensation Benchmark" (estimated market salary) for the role.
    *   **d. Narrative Crafting**: Generates a "Your Narrative for This Role" sectionâ€”a compelling story connecting the user's resume to the company's needs.
7.  **Reporting**: The agent generates a `Job_Report.md` file containing the full dossier for the top 3 opportunities.
8.  **Data Persistence**: The agent updates:
    *   `seen_jobs.csv`: Appends the URLs of the reported jobs.
    *   `job_details.csv`: Appends structured data (Title, Company, Salary Benchmark, URL, Notes) for future analysis.

## 3. Key "Headhunter" Features

*   **Market-Aware**: Instead of just finding ads, it first analyzes the market to identify high-value company targets.
*   **Opportunity-Driven**: It combines searching public job boards with monitoring high-priority companies for "hidden" opportunities or hiring signals.
*   **Network-Focused**: Provides intelligence on key people to facilitate strategic networking.
*   **Compensation-Savvy**: Arms the user with salary benchmarks for negotiation.
*   **Narrative-Builder**: Helps the user craft a compelling story for each role.
*   **Stateful Memory**: Remembers past results to ensure all leads are new.

## 4. Inputs & Outputs

*   **Inputs**:
    *   `resume.pdf`
    *   `Job Title` (on launch)
    *   `Location` (on launch)
*   **Outputs**:
    *   `Job_Report.md`: A rich briefing dossier.
    *   `seen_jobs.csv`: Log of reported opportunities.
    *   `job_details.csv`: Structured database of job details.

## 5. Technical Approach

*   Main script: `job_search_agent.py`.
*   Orchestrates logic from `job_search_script.py` and `company_research_script.py`.
*   `llama-index` and `llama-parse` will be fully removed. Resume parsing will be handled by `PyMuPDF` for text extraction and the OpenAI API for structuring.
*   Web Intelligence: `google_web_search` and `web_fetch` tools will be heavily used for market analysis, networking, and compensation research.
*   New Dependencies: `PyMuPDF`, `pandas`.